
adc_first_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000051f  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a4  00000000  00000000  00000667  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e4  00000000  00000000  00000b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c1  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	16 c0       	rjmp	.+44     	; 0x62 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>

int main(void)
{	
	
	ADMUX	|=	(1<<REFS0);	//Reference voltage: AVCC
  38:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA	|=	(1<<ADEN);	//ADC ON
  3a:	37 9a       	sbi	0x06, 7	; 6
	ADMUX	|=	(1<<MUX0);	//Select channel ADC1
  3c:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA	|=	(1<<ADPS2)	|	(1<<ADPS1)	|	(1<<ADPS0);	//ADC Prescaler: 128
  3e:	86 b1       	in	r24, 0x06	; 6
  40:	87 60       	ori	r24, 0x07	; 7
  42:	86 b9       	out	0x06, r24	; 6
	DDRD	|=	(1<<PB0);	//PB0 AS OUT
  44:	88 9a       	sbi	0x11, 0	; 17

	
    while (1) 
    {
		ADCSRA	|=	(1<<ADSC);			//Begin measure
  46:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA	&	(1<<ADSC));	//Wait till end
  48:	36 99       	sbic	0x06, 6	; 6
  4a:	fe cf       	rjmp	.-4      	; 0x48 <__SREG__+0x9>
		
		if (ADC	>	512)
  4c:	84 b1       	in	r24, 0x04	; 4
  4e:	95 b1       	in	r25, 0x05	; 5
  50:	81 30       	cpi	r24, 0x01	; 1
  52:	92 40       	sbci	r25, 0x02	; 2
  54:	10 f0       	brcs	.+4      	; 0x5a <__SREG__+0x1b>
		{
			PORTB	|=	(1<<PB0);
  56:	c0 9a       	sbi	0x18, 0	; 24
  58:	f6 cf       	rjmp	.-20     	; 0x46 <__SREG__+0x7>
		}
		else
		{
			PORTB	&=	(1<<PB0);
  5a:	88 b3       	in	r24, 0x18	; 24
  5c:	81 70       	andi	r24, 0x01	; 1
  5e:	88 bb       	out	0x18, r24	; 24
  60:	f2 cf       	rjmp	.-28     	; 0x46 <__SREG__+0x7>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>
